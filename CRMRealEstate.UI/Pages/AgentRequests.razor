@page "/agent-requests"
@using CRMRealEstate.DataAccess.Enums
@using CRMRealEstate.UI.Models
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

@inject HttpClient Http
@inject AuthenticationStateProvider AuthState

<h3>Cereri de la clienți</h3>

@if (requests == null)
{
    <p>Se încarcă cererile...</p>
}
else if (!requests.Any())
{
    <p>Nu există cereri în așteptare.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Titlu</th>
                <th>Mesaj</th>
                <th>Client</th>
                <th>Acțiuni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                <tr>
                    <td>@request.Title</td>
                    <td>@request.CustomerMessage</td>
                    <td>@request.CustomerId</td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => ApproveRequest(request)">Aprobă</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => RejectRequest(request)">Respinge</button>
                        <button class="btn btn-info btn-sm" @onclick="() => OpenRespondDialog(request)">Răspunde</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RequestResponseModel> requests;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            requests = await Http.GetFromJsonAsync<List<RequestResponseModel>>("/requests");
            requests = requests.Where(r => r.Status == RequestStatus.Pending).ToList();
        }
    }

    private async Task ApproveRequest(RequestResponseModel request)
    {
        var response = await Http.PutAsJsonAsync($"/requests/{request.Id}", RequestStatus.Completed);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
        }
        else
        {
            Console.WriteLine("Eroare la aprobare");
        }
    }

    private async Task RejectRequest(RequestResponseModel request)
    {
        var response = await Http.PutAsJsonAsync($"/requests/{request.Id}", RequestStatus.Rejected);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
        }
        else
        {
            Console.WriteLine("Eroare la respingere");
        }
    }

    [Inject] IDialogService DialogService { get; set; }

    private async Task OpenRespondDialog(RequestResponseModel request)
    {
        var parameters = new DialogParameters
            {
                ["RequestId"] = request.Id
            };

        var dialog = DialogService.Show<RespondToRequestDialog>("Răspunde la cerere", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            string agentMessage = result.Data.ToString();

            var respondModel = new RespondToRequestModel
                {
                    RequestId = request.Id,
                    AgentMessage = agentMessage
                };

            var response = await Http.PostAsJsonAsync($"/requests/{request.Id}/respond", respondModel);

            if (response.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
            }
            else
            {
                Console.WriteLine("Eroare la trimiterea răspunsului.");
            }
        }
    }
}