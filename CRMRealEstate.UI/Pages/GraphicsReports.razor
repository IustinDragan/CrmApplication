@page "/charts"
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor

<MudPaper Class="pa-6 mt-4" Style="border-radius: 12px; background-color: #f9f9fb;">
    <MudText Typo="Typo.h5" Class="text-center mb-4" Style="font-weight: 700; color: #1565c0;">
        Compară tranzacțiile din două perioade
    </MudText>

    <MudGrid GutterSize="3">
        <MudItem xs="12" md="6">
            <MudDateRangePicker @bind-DateRange="_range1" Label="Perioada 1" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDateRangePicker @bind-DateRange="_range2" Label="Perioada 2" />
        </MudItem>
    </MudGrid>

    <MudGrid GutterSize="3">
        <MudItem xs="12" md="8">
            <MudChart ChartType="ChartType.Bar"
                      ChartSeries="@_barSeries"
                      XAxisLabels="@_barXAxisLabels"
                      Options="chartOptions"
                      Width="100%"
                      Height="350px" />
        </MudItem>

        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Detalii pe perioadă</MudText>
                @if (_barDetails is not null && _barDetails.Any())
                {
                    @foreach (var detail in _barDetails)
                    {
                        <MudText Typo="Typo.body2">@detail</MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Nu sunt date de afișat.</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4 mt-4 d-flex justify-center">
        <MudButton OnClick="LoadBarChart"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   DisableElevation="true">
            Generează Grafic Bar
        </MudButton>
    </MudPaper>

    <MudDivider Class="my-6" />
</MudPaper>

@code {
    private DateRange _range1 = new(DateTime.Today.AddMonths(-2), DateTime.Today.AddMonths(-1));
    private DateRange _range2 = new(DateTime.Today.AddMonths(-1), DateTime.Today);

    private readonly ChartOptions chartOptions = new();

    private List<ChartSeries> _barSeries = new();
    private string[] _barXAxisLabels = { };
    private List<string> _barDetails = new();

    private async Task LoadBarChart()
    {
        double v1 = await GetTotalForRange(_range1);
        double v2 = await GetTotalForRange(_range2);
        double total = v1 + v2;

        var label1 = $"Perioada 1 ({_range1.Start?.ToString("dd.MM")} - {_range1.End?.ToString("dd.MM")})";
        var label2 = $"Perioada 2 ({_range2.Start?.ToString("dd.MM")} - {_range2.End?.ToString("dd.MM")})";

        _barSeries = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Tranzacții",
                Data = new[] { v1, v2 }
            }
        };

        _barXAxisLabels = new[] { label1, label2 };

        _barDetails = new List<string>
        {
            $"{label1}: {v1:N0} € ({(total > 0 ? v1 / total * 100 : 0):0.0}%)",
            $"{label2}: {v2:N0} € ({(total > 0 ? v2 / total * 100 : 0):0.0}%)"
        };

        StateHasChanged();
    }

    private async Task<double> GetTotalForRange(DateRange range)
    {
        if (range.Start is null || range.End is null)
            return 0;

        var start = range.Start.Value.ToString("yyyy-MM-dd");
        var end = range.End.Value.ToString("yyyy-MM-dd");

        try
        {
            var total = await Http.GetFromJsonAsync<decimal>($"/transaction/total-amount?startDate={start}&endDate={end}");
            return (double)total;
        }
        catch
        {
            return 0;
        }
    }
}

