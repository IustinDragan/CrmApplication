@page "/rapoarte"
@layout MainLayout
@using CRMRealEstate.UI.Models
@using CRMRealEstate.UI.Enums
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@inject HttpClient Http

<PageTitle>Rapoarte Tranzacții</PageTitle>

<div class="raports-page">
    <MudPaper>
        <MudText Typo="Typo.h5" Class="top-centered-text">Generează un raport financiar detaliat</MudText>

        <MudForm @ref="form" Class="form-wrapper">
            <div class="form-field">
                <MudTextField Label="ID Agent" Variant="Variant.Outlined" @bind-Value="agentId" />
            </div>

            <div class="form-field">
                <MudDatePicker Label="Dată (Luna/An)" Variant="Variant.Outlined" PickerVariant="PickerVariant.Dialog" @bind-Date="selectedDate" />
            </div>

            <div class="form-field">
                <MudSelect T="TransactionType?" Dense="true" @bind-Value="selectedTypeEnum" Label="Tip Tranzacție" Variant="Variant.Outlined">
                    <MudSelectItem T="TransactionType?" Value="@(null)">Toate</MudSelectItem>
                    <MudSelectItem T="TransactionType?" Value="TransactionType.Sale">Vânzare</MudSelectItem>
                    <MudSelectItem T="TransactionType?" Value="TransactionType.Rent">Închiriere</MudSelectItem>
                </MudSelect>
            </div>
        </MudForm>

        <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" OnClick="ApplyFilters">
            Vezi rezultatele
        </MudButton>
    </MudPaper>

    <MudPaper Class="p-4 mt-6 table-container" Elevation="1">
        @if (transactions != null)
        {
            <MudTable Items="transactions" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Agent</MudTh>
                    <MudTh>Proprietate</MudTh>
                    <MudTh>Data</MudTh>
                    <MudTh Align="Right">Preț</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Tipul Tranzacției</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.AgentName</MudTd>
                    <MudTd>@context.PropertyTitle</MudTd>
                    <MudTd>@context.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("ro-RO"))</MudTd>
                    <MudTd Align="Right">@string.Format(new System.Globalization.CultureInfo("ro-RO"), "{0:N0} €", context.Price)</MudTd>
                    <MudTd>
                        <span class="status-chip @context.Status">
                            @context.Status
                        </span>
                    </MudTd>
                    <MudTd>@context.TypeOfTransaction</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Completează filtrele pentru a genera raportul.
            </MudText>
        }
    </MudPaper>
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Style="width: 50px; height: 50px;" Indeterminate="true"  Class="centered-progress" />
    }
</div>

@code {
    private MudForm form;
    private int agentId;
    private DateTime? selectedDate;
    private TransactionType? selectedTypeEnum = null;
    private List<TransactionResponseModel>? transactions;
    private bool isLoading = false;

    private async Task ApplyFilters()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var queryParams = new Dictionary<string, string>();

            if (agentId > 0)
            {
                queryParams.Add("agentId", agentId.ToString());
            }

            if (selectedDate.HasValue)
            {
                queryParams.Add("year", selectedDate.Value.Year.ToString());
                queryParams.Add("month", selectedDate.Value.Month.ToString());
            }

            if (selectedTypeEnum.HasValue)
                queryParams.Add("type", selectedTypeEnum.Value.ToString());

            var url = QueryHelpers.AddQueryString("/transaction/report", queryParams);
            var result = await Http.GetFromJsonAsync<List<TransactionResponseModel>>(url);

            transactions = result ?? new List<TransactionResponseModel>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la filtrare: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
