@page "/send-request"
@using CRMRealEstate.DataAccess.Enums
@using CRMRealEstate.UI.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthState
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3 class="mb-4">Trimite un mesaj către agent</h3>

<div class="card shadow-sm p-4 mb-5 rounded custom-form">
    <EditForm Model="requestModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label for="title" class="form-label fw-semibold">Titlu</label>
            <InputText id="title" class="form-control form-control-lg" @bind-Value="requestModel.Title" />
        </div>

        <div class="mb-4">
            <label for="message" class="form-label fw-semibold">Mesaj</label>
            <InputTextArea id="message" class="form-control form-control-lg" rows="4" @bind-Value="requestModel.CustomerMessage" />
        </div>

        <div class="mb-4">
            <label for="agent" class="form-label fw-semibold">Selectează agentul</label>
            <select id="agent" class="form-select form-select-lg" @bind="requestModel.AgentId">
                <option value="">-- Selectează un agent --</option>
                @foreach (var agent in agents)
                {
                    <option value="@agent.Id">@agent.UserName</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary px-4 py-2 rounded-pill">Trimite</button>
    </EditForm>
</div>

@if (myRequests != null && myRequests.Any())
{
    <h4 class="mt-5 mb-3">Istoric cereri și răspunsuri</h4>
    <div class="table-responsive">
        <table class="table table-hover custom-table rounded">
            <thead class="table-dark text-white">
                <tr>
                    <th class="fw-bold">Titlu</th>
                    <th class="fw-bold">Mesajul tău</th>
                    <th class="fw-bold">Status</th>
                    <th class="fw-bold">Răspunsul agentului</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var req in myRequests)
                {
                    <tr>
                        <td class="text-capitalize">@req.Title</td>
                        <td>@req.CustomerMessage</td>
                        <td>
                            <span class="badge
                                @(req.Status == RequestStatus.Completed ? "bg-success" :
                                  req.Status == RequestStatus.Rejected ? "bg-danger" :
                                  req.Status == RequestStatus.Pending ? "bg-warning text-dark" :
                                  "bg-secondary")">
                                @req.Status.ToString()
                            </span>


                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(req.AgentMessage))
                            {
                                <span>@req.AgentMessage</span>
                            }
                            else
                            {
                                <em class="text-muted">În așteptare</em>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    private CreateRequestModel requestModel = new CreateRequestModel();
    private List<UserModel> agents = new List<UserModel>();

    private async Task HandleValidSubmit()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var customerIdClaim = user.FindFirst("id")?.Value;

            if (!string.IsNullOrWhiteSpace(customerIdClaim))
            {
                requestModel.CustomerId = int.Parse(customerIdClaim);
            }

            requestModel.Status = RequestStatus.Pending;

            var response = await Http.PostAsJsonAsync("/requests", requestModel);

            if (response.IsSuccessStatusCode)
            {
                requestModel = new CreateRequestModel();

                await OnInitializedAsync();
            }
            else
            {
                Console.WriteLine("Eroare la trimiterea cererii!");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var users = await Http.GetFromJsonAsync<List<UserModel>>("/users");

        agents = users.Where(u => u.RoleName == Roles.SalesAgent).ToList();

        var authState = await AuthState.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var customerId = user.FindFirst("id")?.Value;
            if (!string.IsNullOrWhiteSpace(customerId))
            {
                myRequests = await Http.GetFromJsonAsync<List<RequestResponseModel>>($"/requests/customer/{customerId}");
            }
        }

    }

    public class UserModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string? UserName { get; set; }
        public string EmailAddress { get; set; }
        public string PhoneNumber { get; set; }
        public Roles RoleName { get; set; }
        public DateTime UserCreatedAt { get; set; }
    }

    private List<RequestResponseModel> myRequests = new();
}