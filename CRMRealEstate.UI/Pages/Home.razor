@page "/"
@using System.Text
@using CRMRealEstate.UI.Models
@inject UserFavouriteAnnouncements userFavouriteAnnouncements
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="home-wrapper">
    <h1 class="hero-title">Bine ai venit la CRM Real Estate</h1>
    <p class="hero-sub">Administrează-ți anunțurile și proprietățile imobiliare cu ușurință.</p>

    <div class="search-wrapper">

        <input type="text" placeholder="Caută..." @bind="searchText" @bind:event="oninput" />
        <button @onclick="Search">Caută</button>
        <input type="number" placeholder="Minim" @bind="minPrice" @bind:event="oninput" />
        <input type="number" placeholder="Maxim" @bind="maxPrice" @bind:event="oninput" />
        <button @onclick="FilterPrice">Caută</button>
    </div>

    <div class="dashboard-cards">
        <div class="dashboard-card">
            <div class="card-icon">
                <i class="bi bi-box"></i>
            </div>
            <h5>Proprietăți</h5>
            <p>Vizualizează, adaugă și gestionează proprietățile tale listate.</p>
            <a class="btn btn-outline-primary" href="/properties">Vezi Proprietăți</a>
        </div>

        <div class="dashboard-card">
            <div class="card-icon">
                <i class="bi bi-building"></i>
            </div>
            <h5>Anunțuri</h5>
            <p>Publică anunțuri noi sau editează-le pe cele existente.</p>
            <a class="btn btn-outline-primary" href="/announcements">Gestionare Anunțuri</a>
        </div>

        <div class="dashboard-card">
            <div class="card-icon">
                <i class="bi bi-person"></i>
            </div>
            <h5>Profilul Meu</h5>
            <p>Actualizează datele contului tău și informațiile personale.</p>
            <button class="btn btn-outline-primary" @onclick="GoToProfile">Profilul Meu</button>
        </div>
    </div>
</div>

@code{
    private readonly string startDate = string.Empty;
    private List<AnnouncementResponseModel> announcements;
    private string searchText = string.Empty;
    private string queryString = string.Empty;
    private string queryStringForPrice = string.Empty;
    private double? priceFilter;

    private double? minPrice;
    private double? maxPrice;
    private async Task Search()
    {
        queryString = BuildQueryString(searchText);
        var apiUrl = queryString;

        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>(apiUrl);
    }

    private async Task FilterPrice()
    {
        queryStringForPrice = BuildQueryStringForPrice(minPrice, maxPrice);
        var apiUrl = queryStringForPrice;

        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>(apiUrl);
    }

    private string BuildQueryString(string searchText)
    {
        var queryBuilder = new StringBuilder("announcement?");

        if (!string.IsNullOrEmpty(startDate))
        {
            queryBuilder.Append($"startDate={startDate}&");
        }

        if (!string.IsNullOrEmpty(searchText))
        {
            queryBuilder.Append($"searchText={searchText}&");
        }

        if (queryBuilder.Length > 0)
        {
            queryBuilder.Length--;
        }

        var apiUrl = "announcement" + (!string.IsNullOrEmpty(queryString) ? "?" + queryString : "");

        return queryBuilder.ToString();
    }


    private string BuildQueryStringForPrice(double? minPrice, double? maxPrice)
    {
        var queryBuilder = new StringBuilder("announcement?");

        if (minPrice.HasValue)
        {
            queryBuilder.Append($"price={minPrice}&");
        }

        if (maxPrice.HasValue)
        {
            queryBuilder.Append($"maxValue={maxPrice}&");
        }

        if (queryBuilder.Length > 0)
        {
            queryBuilder.Length--;
        }

        return queryBuilder.ToString();
    }


    private void GoToProfile()
    {
        Navigation.NavigateTo("/myProfileCustomerPage");
    }
}
        